#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'fullstop.rb'
require 'fileutils'

class App
  include Methadone::Main
  include Methadone::CLILogging
  include Methadone::SH

  main do |repo_url|
    Dir.chdir options['checkout-dir'] do 
      repo_dir = clone_repo(repo_url, options[:force])
      files_in(repo_dir) do |file|
        link_file(repo_dir,file,options[:force])
      end
    end
  end

  def self.clone_repo(repo_url,force)
    repo_dir = repo_url.split(/\//)[-1].gsub(/\.git$/,'')
    if force && Dir.exists?(repo_dir)
      warn "deleting #{repo_dir} before cloning"
      FileUtils.rm_rf repo_dir
    end
    unless sh("git clone #{repo_url}") == 0
      exit_now!("checkout dir already exists, use --force to overwrite")
    end
    repo_dir
  end

  def self.files_in(repo_dir)
    Dir.entries(repo_dir).each do |file|
      next if file == '.' || file == '..' || file == '.git'
      yield file
    end
  end

  def self.link_file(repo_dir,file,overwrite)
    source_file = File.join(repo_dir,file)
    FileUtils.rm(file) if File.exists?(file) && overwrite
    FileUtils.ln_s source_file,'.'
  end


  # supplemental methods here

  # declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Fullstop::VERSION


  description 'Manage dotfile from a git repo'

  options['checkout-dir'] = ENV['HOME']
  on("--force","Force overwriting existing files")
  on("-d DIR","--checkout-dir",
   "Set the location of the checkout dir")

  arg :repo_url, "URL to the git repository containing your dotfiles"

  use_log_level_option

  go!

end
